// const { Middleware } = require('swagger-express-middleware');
const http = require('http');
const fs = require('fs');
const path = require('path');
const jsYaml = require('js-yaml');
const express = require('express');
const cors = require('cors');
const cookieParser = require('cookie-parser');
const bodyParser = require('body-parser');
const interceptor = require('express-interceptor');
const axios = require('axios');
// const https = require('https');
const config = require('./config');
const logger = require('./logger');
const {
  connect, close, HUB_SANTE_EXCHANGE, DEMO_CLIENT_IDS, messageProperties,
} = require('./rabbit/utils');

// Ref.: https://smallstep.com/hello-mtls/doc/combined/nodejs/axios
/*
const httpsAgent = new https.Agent({
  // Needed to allow self-signed certificates | Ref.: https://stackoverflow.com/a/54903835/10115198
  rejectUnauthorized: false,
  cert: fs.readFileSync('certs/certif.crt'),
  key: fs.readFileSync('certs/certif.key'),
  // ca: fs.readFileSync('certs/ACI-EL-ORG-TEST.crt'),
});
 */

class ExpressServer {
  constructor(port, openApiYaml) {
    this.port = port;
    this.app = express();
    this.openApiPath = openApiYaml;
    try {
      this.schema = jsYaml.safeLoad(fs.readFileSync(openApiYaml));
    } catch (e) {
      logger.error('failed to start Express Server', e.message);
    }
    this.setupMiddleware();
  }

  setupMiddleware() {
    // this.setupAllowedMedia();
    this.app.use(cors());
    this.app.use(bodyParser.json({ limit: '14MB' }));
    this.app.use(express.json());
    this.app.use(express.urlencoded({ extended: false }));
    this.app.use(cookieParser());
    // Simple test to see that the server is up and responding
    this.app.get('/hello', (req, res) => res.send(`Hello World. path: ${this.openApiPath}`));
    // Send the openapi document *AS GENERATED BY THE GENERATOR*
    this.app.get('/openapi', (req, res) => res.sendFile((path.join(__dirname, 'api', 'openapi.yaml'))));
    this.app.get('/login-redirect', (req, res) => {
      res.status(200);
      res.json(req.query);
    });
    this.app.get('/oauth2-redirect.html', (req, res) => {
      res.status(200);
      res.json(req.query);
    });

    // Serve distribution UI
    this.app.use('/ui', express.static(path.join(__dirname, 'ui')));

    // Forward UI request to Hub SantÃ©
    this.app.use('/publish', async (req, res) => {
      const { key, msg } = req.body;
      connect((connection, channel) => {
        channel.publish(HUB_SANTE_EXCHANGE, key, Buffer.from(msg), messageProperties);
        console.log(" [x] Sent %s: '%s'", key, msg);
        close(connection);
        res.status(200);
      });
    });

    // Send back info from backend to client using long polling
    // 1. Create long polling endpoint
    const longPoll = require('express-longpoll')(this.app, { DEBUG: true });
    longPoll.create('/poll', { maxListeners: 100 });

    // 2. Subscribe to Hub messages and send them to the client through long polling endpoint
    connect((connection, channel) => {
      for (const [clientName, clientId] of Object.entries(DEMO_CLIENT_IDS)) {
        let queue = `${clientId}.in.message`;
        if (clientName === 'SDIS_Z') {
          queue = `${clientId}.in.ack`;
        }
        console.log(' [*] Waiting for %s messages in %s. To exit press CTRL+C', clientName, queue);
        channel.consume(queue, (msg) => {
          console.log(' [x] Received from %s: %s', clientName, msg.content.toString());
          longPoll.publish('/poll', { clientName, queue, msg: JSON.parse(msg.content) });
        }, {
          noAck: true, // Ref.: https://amqp-node.github.io/amqplib/channel_api.html#channelconsume
        });
      }
    });
  }

  launch() {
    // eslint-disable-next-line no-unused-vars
    this.app.use((err, req, res, next) => {
      // format errors
      res.status(err.status || 500).json({
        message: err.message || err,
        errors: err.errors || '',
      });
    });

    http.createServer(this.app).listen(this.port);
    console.log(`Listening on port ${this.port}`);
  }

  async close() {
    if (this.server !== undefined) {
      await this.server.close();
      console.log(`Server on port ${this.port} shut down`);
    }
  }
}

module.exports = ExpressServer;
